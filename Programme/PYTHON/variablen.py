# Variablen Speichern mit Wetrte


# Variablen sind Container, in denen man Daten speichern kann. In diesem Fall sind die Variablen als "name" und "alter" deklariert.
# String hier ist die Variable "name" der den Wert "mehmet" speichert. Und "mehmet" als Wert, ist ein String, also eine Zeichenkette (eine Folge von Zeichen)
# Der String muss in einem Anf√ºhrungszeichen"" gesetzt werden.
name = "mehmet" 

# alter ist die Variable der den Wert 25 speichert. Der Wert 25 ist eine ganze Zahl ohne Kommastellen also ein Integer.
alter = 25 # integer





# Typumwandlung (Casting) In diesem Code sind zwei Datentypen, String(Zeichenkette) und Integer(ganze Zahl), es ist oft notwendig Datentypen umzuwandeln.
# Wert einer Variable √§ndern, sie √§ndert den Wert der Variable "alter" 25 in 26 um.
alter = 39

# Dieser Code √§ndert den alter 
alter_str  = str(alter) # alter_str Bedeutung, das Suffix "_str" vom "alter", ist eine Konvention um anzuzeigen, dass eine Variable ein String-Wert enth√§lt. str(): ist eine eingebaute Funktion in Python (und auch in anderen Programmiersprachen). str() wandelt den Wert vom "alter" in diesem Fall "str(alter)" die 25 in 26 um. Der R√ºckgabewert der Funktion "str()" wird immer ein String sein.


# Werte ausgeben
print("Name : ", name)
print("Alter: ", alter_str)

# Gleitkommazahlen "float"
hoehe = 180.66 # ist ein float
hoehe_int = int(hoehe) # da wir den float in einer ganzen Zahl sehen wollen wandeln wir den float in ein integer um also machen wir wieder ein Casting.
print("Hoehe: ", hoehe_int)


""" Ausgabe von gemischten Werten !!"""



# append(einzelne Elemente) und extend(mehrere Elemente) sind Funktionen, die es  erm√∂glicht dynamisch weitere Elemente in eine Liste einzuf√ºgen, wobei bei append() nicht mehr als ein Element m√∂glich ist.
# Merke!! append und extend sind Funktionen die hinter einer Variable z.B "zeichen" mit einem Punkt angeh√§ngt werden, z.B. "zeichen.extend()".


# Zahlen-, Buchstaben- und Sonderzeichenliste erstellen. In den eckigen Klammern "[]" sind die Elemente z.B. wie in der Variable "zeichen".
zeichen = ["¬ß","‚úî","%","üëç","?","!"] # Buchstaben und Sonderzeichen k√∂nnen nur in einem "" Anf√ºhrungszeichen platziert werden.
zeichen.extend(["¬ß","$","%","&","?","!"]) # bei extend() m√ºssen die Elemente in eine eckige Klammer.
print("Zeichenliste :", zeichen[0:9]) # in [0:9] dieser Ausgabe werden maximal 9 Elemente aufgelistet, sie ist ein Slicing-Ausdruck.


gemischtewerte = ["$",3,"f","&",7,"j"]
print("gemischte Werte: ", gemischtewerte)

buchstaben = ["hi","mehmet","jo"] 
buchstaben.append("k")
buchstaben.remove("jo")
print("buchstaben: ", buchstaben[0:4]) # buchstaben[0:4] ist ein Slicing-Ausdruck, sie erstellt eine neue Liste die eine Teilmenge der urspr√ºnglichen Liste enth√§lt, wenn die Buchstabenliste aus "buchstaben" wie hier 3 Elemente enth√§lt. Die Elemente werden von links nach rechts aufgez√§hlt sie f√§ngt bei 0 an. Wenn alles ausgegeben werden m√ºssen dann muss [0:3] eingetragen werden. Und wenn ein dynamisches Element aus "append()" mit hinzugef√ºgt werden soll, dann muss einfach nur Anzahl der Elemente in den eckigen Klammern √ºberschritten werden, z.B. von [0:3] zu [0:4.....].


zahlenliste = [1,2,3,4,5,6,7]
zahlenliste.append(7)
zahlenliste.remove(4) # Entfernt eine bestimmte Zahl aus der 
print("Zahlen", zahlenliste[0:7])



""" Heraufinden, wie Lang eine Liste ist """


# L√§nge der Liste von "zahlenliste" ermitteln mit dem "len"

print("L√§nge der Zahlenliste: ", len(zahlenliste))


""" Dictonaries in Python: abspeicherung und Werte √§ndern"""

# Ein Dictonairy ist eine Sammlung von Schl√ºssel-Wert-Paaren. Jeder Schl√ºssel ist Einzigartig und wird verwendet um auf einen bestimmten Wert zuzugreifen. Dictonaries sind ver√§nderbar sowohl der Schl√ºssel und als auch der Wert. 

mein_dictonary = {"name": "Mehmet", "alter": 39} # Erstellung des Dictonary mit dem Namen "mein_dictonary". Sie enth√§lt zwei Schl√ºsselpaare, "name": "Mehmet". Der Schl√ºssel "name" ist mit Wert "Mehmet" verkn√ºpft. "alter": 39, der Schl√ºssel "alter" ist mit dem Wert 39 verkn√ºpft.

print("Name: ", mein_dictonary["name"]) # Hier wird der Wert ausgegeben der mit Schl√ºssel "name" im Dictonary zugeordnet ist.


# Wert √§ndern.

mein_dictonary["name"] = "Bob" # Hier wird der Wert "mehmet" vom Schl√ºssel "name" in mit "Bob" ersetzt. 

print("Name: ", mein_dictonary["name"]) # Hier wird der neue Wert vom Schl√ºssel "name" ausgegeben.

""" Auf ein Schl√ºssel(Key) zugreifen der noch nicht existiert """

# Schl√ºssel hinzuf√ºgen z.B. "hobby"

mein_dictonary["hobby"] = "schwimmen"
print("Hobby: ", mein_dictonary["hobby"]) # Weiterer Schl√ºssel "hobby" wird mit dem Wert Schwimmen ausgegeben.


""" Keyword del(delete) """

# einen Wert l√∂schen.

print("mein_dictonary vor dem L√∂schen: ", mein_dictonary)
del mein_dictonary["hobby"]
print("mein_dictonary nach dem l√∂schen: ", mein_dictonary)


